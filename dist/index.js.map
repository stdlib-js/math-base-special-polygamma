{
  "version": 3,
  "sources": ["../lib/atinfinityplus.js", "../lib/attransitionplus.js", "../lib/polyval_p3.js", "../lib/polyval_p4.js", "../lib/polyval_p5.js", "../lib/polyval_p6.js", "../lib/polyval_p7.js", "../lib/polyval_p8.js", "../lib/polyval_p9.js", "../lib/polyval_p10.js", "../lib/polyval_p11.js", "../lib/polyval_p12.js", "../lib/polycotpi.js", "../lib/nearzero.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar bernoulli = require( '@stdlib/math-base-special-bernoulli' );\nvar factorial = require( '@stdlib/math-base-special-factorial' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar LN_TWO = require( '@stdlib/constants-float64-ln-two' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\nvar MAX_FACTORIAL = 172;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function for large values of `x` such as for `x > 400`.\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @returns {number} (n+1)'th derivative\n* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/06/02/0001/}\n*/\nfunction atinfinityplus( n, x ) {\n\tvar partTerm; // Value of current term excluding the Bernoulli number part\n\tvar xsquared;\n\tvar term; // Value of current term to be added to sum\n\tvar sum; // Current value of accumulated sum\n\tvar nlx;\n\tvar k2;\n\tvar k;\n\n\tif ( n+x === x ) {\n\t\t// If `x` is very large, just concentrate on the first part of the expression and use logs:\n\t\tif ( n === 1 ) {\n\t\t\treturn 1.0 / x;\n\t\t}\n\t\tnlx = n * ln( x );\n\t\tif ( nlx < MAX_LN && n < MAX_FACTORIAL ) {\n\t\t\treturn ( (n & 1) ? 1.0 : -1.0 ) * factorial( n-1 ) * pow( x, -n );\n\t\t}\n\t\treturn ( (n & 1) ? 1.0 : -1.0 ) * exp( gammaln( n ) - ( n*ln(x) ) );\n\t}\n\txsquared = x * x;\n\n\t// Start by setting `partTerm` to `(n-1)! / x^(n+1)`, which is common to both the first term of the series (with k = 1) and to the leading part. We can then get to the leading term by: `partTerm * (n + 2 * x) / 2` and to the first term in the series (excluding the Bernoulli number) by: `partTerm n * (n + 1) / (2x)`. If either the factorial would over- or the power term underflow, set `partTerm` to 0 and then we know that we have to use logs for the initial terms:\n\tif ( n > MAX_FACTORIAL && n*n > MAX_LN ) {\n\t\tpartTerm = 0.0;\n\t} else {\n\t\tpartTerm = factorial( n-1 ) * pow( x, -n-1 );\n\t}\n\tif ( partTerm === 0.0 ) {\n\t\t// Either `n` is very large, or the power term underflows. Set the initial values of `partTerm`, `term`, and `sum` via logs:\n\t\tpartTerm = gammaln(n) - ( (n+1) * ln(x) );\n\t\tsum = exp( partTerm + ln( n + (2.0*x) ) - LN_TWO );\n\t\tpartTerm += ln( n*(n+1) ) - LN_TWO - ln(x);\n\t\tpartTerm = exp( partTerm );\n\t} else {\n\t\tsum = partTerm * ( n+(2.0*x) ) / 2.0;\n\t\tpartTerm *= ( n*(n+1) ) / 2.0;\n\t\tpartTerm /= x;\n\t}\n\t// If the leading term is 0, so is the result:\n\tif ( sum === 0.0 ) {\n\t\treturn sum;\n\t}\n\tfor ( k = 1; ; ) {\n\t\tterm = partTerm * bernoulli( k*2 );\n\t\tsum += term;\n\n\t\t// Normal termination condition:\n\t\tif ( abs( term/sum ) < EPS ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Increment our counter, and move `partTerm` on to the next value:\n\t\tk += 1;\n\t\tk2 = 2 * k;\n\t\tpartTerm *= ( n+k2-2 ) * ( n-1+k2 );\n\t\tpartTerm /= ( k2-1 ) * k2;\n\t\tpartTerm /= xsquared;\n\t\tif ( k > MAX_SERIES_ITERATIONS ) {\n\t\t\tdebug( 'Series did not converge, closest value was: %d.', sum );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( ( n-1 ) & 1 ) {\n\t\tsum = -sum;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = atinfinityplus;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar factorial = require( '@stdlib/math-base-special-factorial' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar trunc = require( '@stdlib/math-base-special-trunc' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar atinfinityplus = require( './atinfinityplus.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\nvar DIGITS_BASE10 = 19;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function.\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @returns {number} (n+1)'th derivative\n* @see {@link http://functions.wolfram.com/GammaBetaErf/PolyGamma2/16/01/01/0017/}\n*/\nfunction attransitionplus( n, x ) {\n\tvar minusMminus1;\n\tvar lnterm;\n\tvar zpows;\n\tvar iter;\n\tvar sum0;\n\tvar d4d;\n\tvar N;\n\tvar m;\n\tvar k;\n\tvar z;\n\n\t// Use N = (0.4 * digits) + (4 * n) for target value for x:\n\td4d = 0.4 * DIGITS_BASE10;\n\tN = d4d + ( 4*n );\n\tm = n;\n\titer = N - trunc( x );\n\n\tif ( iter > MAX_SERIES_ITERATIONS ) {\n\t\tdebug( 'Exceeded maximum series evaluations when evaluated at n = %d and x = %d', n, x );\n\t\treturn NaN;\n\t}\n\tminusMminus1 = -m - 1;\n\tz = x;\n\tsum0 = 0.0;\n\tzpows = 0.0;\n\n\t// Forward recursion to larger `x`, need to check for overflow first though:\n\tif ( ln( z+iter ) * minusMminus1 > -MAX_LN ) {\n\t\tfor ( k = 1; k <= iter; k++ ) {\n\t\t\tzpows = pow( z, minusMminus1 );\n\t\t\tsum0 += zpows;\n\t\t\tz += 1;\n\t\t}\n\t\tsum0 *= factorial( n );\n\t} else {\n\t\tfor ( k = 1; k <= iter; k++ ) {\n\t\t\tlnterm = ( ln( z ) * minusMminus1 ) + gammaln( n+1 );\n\t\t\tsum0 += exp( lnterm );\n\t\t\tz += 1;\n\t\t}\n\t}\n\tif ( ( n-1 ) & 1 ) {\n\t\tsum0 = -sum0;\n\t}\n\treturn sum0 + atinfinityplus( n, z );\n}\n\n\n// EXPORTS //\n\nmodule.exports = attransitionplus;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -2.0;\n\t}\n\treturn -2.0 + (x * -4.0);\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 16.0;\n\t}\n\treturn 16.0 + (x * 8.0);\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -16.0;\n\t}\n\treturn -16.0 + (x * (-88.0 + (x * -16.0)));\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 272.0;\n\t}\n\treturn 272.0 + (x * (416.0 + (x * 32.0)));\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -272.0;\n\t}\n\treturn -272.0 + (x * (-2880.0 + (x * (-1824.0 + (x * -64.0)))));\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 7936.0;\n\t}\n\treturn 7936.0 + (x * (24576.0 + (x * (7680.0 + (x * 128.0)))));\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -7936.0;\n\t}\n\treturn -7936.0 + (x * (-137216.0 + (x * (-185856.0 + (x * (-31616.0 + (x * -256.0))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 353792.0;\n\t}\n\treturn 353792.0 + (x * (1841152.0 + (x * (1304832.0 + (x * (128512.0 + (x * 512.0))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -353792.0;\n\t}\n\treturn -353792.0 + (x * (-9061376.0 + (x * (-21253376.0 + (x * (-8728576.0 + (x * (-518656.0 + (x * -1024.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 22368256.0;\n\t}\n\treturn 22368256.0 + (x * (175627264.0 + (x * (222398464.0 + (x * (56520704.0 + (x * (2084864.0 + (x * 2048.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar evalpoly = require( '@stdlib/math-base-tools-evalpoly' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar signum = require( '@stdlib/math-base-special-signum' );\nvar cospi = require( '@stdlib/math-base-special-cospi' );\nvar sinpi = require( '@stdlib/math-base-special-sinpi' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar LN_PI = require( '@stdlib/constants-float64-ln-pi' );\nvar PI = require( '@stdlib/constants-float64-pi' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar polyval3 = require( './polyval_p3.js' );\nvar polyval4 = require( './polyval_p4.js' );\nvar polyval5 = require( './polyval_p5.js' );\nvar polyval6 = require( './polyval_p6.js' );\nvar polyval7 = require( './polyval_p7.js' );\nvar polyval8 = require( './polyval_p8.js' );\nvar polyval9 = require( './polyval_p9.js' );\nvar polyval10 = require( './polyval_p10.js' );\nvar polyval11 = require( './polyval_p11.js' );\nvar polyval12 = require( './polyval_p12.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\n\n// \u03C0 raised to powers two to twelve (obtained from Wolfram Alpha):\nvar PI2 = 9.869604401089358;\nvar PI3 = 31.00627668029982;\nvar PI4 = 97.40909103400244;\nvar PI5 = 306.01968478528147;\nvar PI6 = 961.3891935753045;\nvar PI7 = 3020.2932277767923;\nvar PI8 = 9488.531016070574;\nvar PI9 = 29809.09933344621;\nvar PI10 = 93648.04747608303;\nvar PI11 = 294204.0179738906;\nvar PI12 = 924269.1815233742;\n\n// Derivative memoization table:\nvar table = [\n\t[ -1.0 ]\n];\n\n\n// FUNCTIONS //\n\n/**\n* Updates the derivatives table.\n*\n* @private\n* @param {PositiveInteger} n - derivative\n*/\nfunction calculateDerivatives( n ) {\n\tvar noffset; // offset for next row\n\tvar offset; // 1 if the first cos power is 0; otherwise 0\n\tvar ncols; // how many entries there are in the current row\n\tvar mcols; // how many entries there will be in the next row\n\tvar mo; // largest order of the polynomial of cos terms\n\tvar so; // order of the sin term\n\tvar co; // order of the cosine term in entry \"j\"\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tfor ( i = table.length-1; i < n-1; i++ ) {\n\t\toffset = ( i&1 )|0;\n\t\tso = ( i+2 )|0;\n\t\tmo = ( so-1 )|0;\n\t\tncols = ( (mo-offset)/2 )|0;\n\t\tnoffset = ( offset ) ? 0 : 1;\n\t\tmcols = ( (mo+1-noffset)/2 )|0;\n\t\ttable.push( zeros( mcols+1 ) );\n\t\tfor ( j = 0; j <= ncols; j++ ) {\n\t\t\tco = ( (2*j)+offset )|0;\n\t\t\tk = ( (co+1)/2 )|0;\n\t\t\ttable[ i+1 ][ k ] += ((co-so)*table[i][j]) / (so-1);\n\t\t\tif ( co ) {\n\t\t\t\tk = ( (co-1)/2 )|0;\n\t\t\t\ttable[ i+1 ][ k ] += (-co*table[i][j]) / (so-1);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns n'th derivative of \\\\(\\operatorname{cot|(\\pi x)\\\\) at \\\\(x\\\\).\n*\n* ## Notes\n*\n* -   The derivatives are simply tabulated for up to \\\\(n = 9\\\\), beyond that it is possible to calculate coefficients as follows. The general form of each derivative is:\n*\n*     ```tex\n*     \\pi^n * \\sum_{k=0}^n C[k,n] \\cdot \\cos^k(\\pi \\cdot x) \\cdot \\operatorname{csc}^{(n+1)}(\\pi \\cdot x)\n*     ```\n*\n*     with constant \\\\( C\\[0,1\\] = -1 \\\\) and all other \\\\( C\\[k,n\\] = 0 \\)). Then for each \\\\( k < n+1 \\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     C[k-1, n+1]  &-= k * C[k, n]; \\\\\n*     C[k+1, n+1]  &+= (k-n-1) * C[k, n];\n*     \\end{align*}\n*     ```\n*\n* -   Note that there are many different ways of representing this derivative thanks to the many trigonometric identities available. In particular, the sum of powers of cosines could be replaced by a sum of cosine multiple angles, and, indeed, if you plug the derivative into Mathematica, this is the form it will give. The two forms are related via the Chebeshev polynomials of the first kind and \\\\( T_n(\\cos(x)) = \\cos(n x) \\\\). The polynomial form has the great advantage that all the cosine terms are zero at half integer arguments - right where this function has it's minimum - thus avoiding cancellation error in this region.\n*\n* -   And finally, since every other term in the polynomials is zero, we can save space by only storing the non-zero terms. This greatly increases complexity when subscripting the tables in the calculation, but halves the storage space (and complexity for that matter).\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input\n* @param {number} xc - one minus `x`\n* @returns {number} n'th derivative\n*/\nfunction polycotpi( n, x, xc ) {\n\tvar powTerms;\n\tvar idx;\n\tvar out;\n\tvar sum;\n\tvar c;\n\tvar s;\n\n\ts = ( abs( x ) < abs( xc ) ) ? sinpi( x ) : sinpi( xc );\n\tc = cospi( x );\n\tswitch ( n ) { // eslint-disable-line default-case\n\tcase 1:\n\t\treturn -PI / ( s * s );\n\tcase 2:\n\t\treturn 2.0 * PI2 * c / pow( s, 3.0 );\n\tcase 3:\n\t\treturn PI3 * polyval3( c*c ) / pow( s, 4.0 );\n\tcase 4:\n\t\treturn PI4 * c * polyval4( c*c ) / pow( s, 5.0 );\n\tcase 5:\n\t\treturn PI5 * polyval5( c*c ) / pow( s, 6.0 );\n\tcase 6:\n\t\treturn PI6 * c * polyval6( c*c ) / pow( s, 7.0 );\n\tcase 7:\n\t\treturn PI7 * polyval7( c*c ) / pow( s, 8.0 );\n\tcase 8:\n\t\treturn PI8 * c * polyval8( c*c ) / pow( s, 9.0 );\n\tcase 9:\n\t\treturn PI9 * polyval9( c*c ) / pow( s, 10.0 );\n\tcase 10:\n\t\treturn PI10 * c * polyval10( c*c ) / pow( s, 11.0 );\n\tcase 11:\n\t\treturn PI11 * polyval11( c*c ) / pow( s, 12.0 );\n\tcase 12:\n\t\treturn PI12 * c * polyval12( c*c ) / pow( s, 13.0 );\n\t}\n\t// We'll have to compute the coefficients up to `n`, complexity is O(n^2) which we don't worry about as the values are computed once and then cached. However, if the final evaluation would have too many terms just bail out right away:\n\tif ( n/2 > MAX_SERIES_ITERATIONS ) {\n\t\tdebug( 'The value of `n` is so large that we\\'re unable to compute the result in reasonable time.' );\n\t\treturn NaN;\n\t}\n\tidx = n - 1;\n\tif ( idx >= table.length ) {\n\t\t// Lazily calculate derivatives:\n\t\tcalculateDerivatives( n );\n\t}\n\tsum = evalpoly( table[ idx ], c*c );\n\tif ( idx & 1 ) {\n\t\tsum *= c; // First coefficient is order 1, and really an odd polynomial.\n\t}\n\tif ( sum === 0.0 ) {\n\t\treturn sum;\n\t}\n\t// The remaining terms are computed using logs since the powers and factorials get real large real quick:\n\tpowTerms = n * LN_PI;\n\tif ( s === 0.0 ) {\n\t\treturn ( sum >= 0.0 ) ? PINF : NINF;\n\t}\n\tpowTerms -= ln( abs( s ) ) * ( n+1 );\n\tpowTerms += gammaln( n ) + ln( abs(sum) );\n\n\tif ( powTerms > MAX_LN ) {\n\t\treturn ( sum >= 0.0 ) ? PINF : NINF;\n\t}\n\tout = exp( powTerms ) * signum( sum );\n\tif ( s < 0.0 && ( (n+1)&1 ) ) {\n\t\tout *= -1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = polycotpi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar factorial = require( '@stdlib/math-base-special-factorial' );\nvar zeta = require( '@stdlib/math-base-special-riemann-zeta' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar MAX = require( '@stdlib/constants-float64-max' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar MAX_SERIES_ITERATIONS = 1000000;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function near zero.\n*\n* ## Notes\n*\n* -   If we take this [expansion][1] for `polygamma` and substitute in this [expression][2] for `polygamma(n, 1)`, we get an alternating series for polygamma when `x` is small in terms of zeta functions of integer arguments (which are easy to evaluate, at least when the integer is even).\n*\n* [1]: http://functions.wolfram.com/06.15.06.0003.02\n* [2]: http://functions.wolfram.com/06.15.03.0009.01\n*\n* @private\n* @param {PositiveInteger} n - derivative to evaluate\n* @param {number} x - input value\n* @returns {number} (n+1)'th derivative\n*/\nfunction nearzero( n, x ) {\n\tvar factorialPart;\n\tvar prefix;\n\tvar scale;\n\tvar term;\n\tvar sum;\n\tvar AX;\n\tvar k;\n\n\t// In order to avoid spurious overflow, save the `n!` term for later, and rescale at the end:\n\tscale = factorial( n );\n\n\t// \"factorialPart\" contains everything except the zeta function evaluations in each term:\n\tfactorialPart = 1;\n\n\t// \"prefix\" is what we'll be adding the accumulated sum to, it will be `n! / z^(n+1)`, but since we're scaling by `n!` it is just `1 / z^(n+1)` for now:\n\tprefix = pow( x, n+1 );\n\tif ( prefix === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tprefix = 1.0 / prefix;\n\n\t// First term in the series is necessarily `< zeta(2) < 2`, so ignore the sum if it will have no effect on the result:\n\tif ( prefix > 2.0/EPS ) {\n\t\tif ( n & 1 ) {\n\t\t\treturn ( AX/prefix < scale ) ? PINF : prefix * scale;\n\t\t}\n\t\treturn ( AX/prefix < scale ) ? NINF : -prefix * scale;\n\t}\n\tsum = prefix;\n\tfor ( k = 0; ; ) {\n\t\t// Get the k'th term:\n\t\tterm = factorialPart * zeta( k+n+1 );\n\t\tsum += term;\n\n\t\t// Termination condition:\n\t\tif ( abs( term ) < abs(sum * EPS ) ) {\n\t\t\tbreak;\n\t\t}\n\t\t// Move on `k` and `factorialPart`:\n\t\tk += 1;\n\t\tfactorialPart *= (-x * (n+k)) / k;\n\n\t\t// Last chance exit:\n\t\tif ( k > MAX_SERIES_ITERATIONS ) {\n\t\t\tdebug( 'Series did not converge, best value is %d.', sum );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\t// We need to multiply by the scale, at each stage checking for overflow:\n\tif ( MAX/scale < sum ) {\n\t\treturn PINF;\n\t}\n\tsum *= scale;\n\treturn ( n & 1 ) ? sum : -sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nearzero;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_65_0/boost/math/special_functions/detail/polygamma.hpp}. The implementation follows the original but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright Nikhar Agrawal 2013.\n* (C) Copyright Christopher Kormanyos 2013.\n* (C) Copyright John Maddock 2014.\n* (C) Copyright Paul Bristow 2013.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar factorial = require( '@stdlib/math-base-special-factorial' );\nvar trigamma = require( '@stdlib/math-base-special-trigamma' );\nvar digamma = require( '@stdlib/math-base-special-digamma' );\nvar signum = require( '@stdlib/math-base-special-signum' );\nvar ldexp = require( '@stdlib/math-base-special-ldexp' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar trunc = require( '@stdlib/math-base-special-trunc' );\nvar zeta = require( '@stdlib/math-base-special-riemann-zeta' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar MAX = require( '@stdlib/constants-float64-max' );\nvar PI = require( '@stdlib/constants-float64-pi' );\nvar attransitionplus = require( './attransitionplus.js' );\nvar atinfinityplus = require( './atinfinityplus.js' );\nvar polycotpi = require( './polycotpi.js' );\nvar nearzero = require( './nearzero.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'polygamma' );\nvar DIGITS_BASE10 = 19;\n\n\n// MAIN //\n\n/**\n* Evaluates the polygamma function.\n*\n* @param {NonNegativeInteger} n - order of derivative\n* @param {number} x - input value\n* @returns {number} (n+1)'th derivative\n*\n* @example\n* var v = polygamma( 3, 1.2 );\n* // returns ~3.245\n*\n* @example\n* var v = polygamma( 5, 1.2 );\n* // returns ~41.39\n*\n* @example\n* var v = polygamma( 3, -4.9 );\n* // returns ~60014.239\n*\n* @example\n* var v = polygamma( 2.5, -1.2 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( -1, 5.3 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( 2, -2.0 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( NaN, 2.1 );\n* // returns NaN\n*\n* @example\n* var v = polygamma( 1, NaN );\n* // returns NaN\n*\n* @example\n* var v = polygamma( NaN, NaN );\n* // returns NaN\n*/\nfunction polygamma( n, x ) {\n\tvar xSmallLimit;\n\tvar result;\n\tvar z;\n\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n === 0 ) {\n\t\treturn digamma( x );\n\t}\n\tif ( n === 1 ) {\n\t\treturn trigamma( x );\n\t}\n\tif ( x < 0.0 ) {\n\t\tif ( floor(x) === x ) {\n\t\t\t// Result is infinity if `x` is odd, and a pole error if `x` is even.\n\t\t\tif ( trunc( x ) & 1 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tdebug( 'Evaluation at negative integer: %d.', x );\n\t\t\treturn NaN;\n\t\t}\n\t\tz = 1.0 - x;\n\t\tresult = polygamma( n, z ) + ( PI * polycotpi( n, z, x ) );\n\t\treturn ( n & 1 ) ? -result : result;\n\t}\n\t// Limit for use of small-x series is chosen so that the series doesn't go too divergent in the first few terms. Ordinarily, this would mean setting the limit to `~1/n`, but we can tolerate a small amount of divergence:\n\txSmallLimit = min( 5.0/n, 0.25 );\n\tif ( x < xSmallLimit ) {\n\t\treturn nearzero( n, x );\n\t}\n\tif ( x > ( 0.4 * DIGITS_BASE10 ) + ( 4*n ) ) {\n\t\treturn atinfinityplus( n, x );\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );\n\t}\n\tif ( x === 0.5 ) {\n\t\tresult = ( ( n & 1 ) ? 1.0 : -1.0 ) * factorial( n ) * zeta( n+1 );\n\t\tif ( abs( result ) >= ldexp( MAX, -n-1 ) ) {\n\t\t\treturn ( signum( result ) === 1 ) ? PINF : NINF;\n\t\t}\n\t\tresult *= ldexp( 1.0, n+1 ) - 1.0;\n\t\treturn result;\n\t}\n\treturn attransitionplus( n, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polygamma;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the polygamma function.\n*\n* @module @stdlib/math-base-special-polygamma\n*\n* @example\n* var polygamma = require( '@stdlib/math-base-special-polygamma' );\n*\n* var v = polygamma( 3, 1.2 );\n* // returns ~3.245\n*\n* v = polygamma( 5, 1.2 );\n* // returns ~41.39\n*\n* v = polygamma( 3, -4.9 );\n* // returns ~60014.239\n*\n* v = polygamma( -1, 5.3 );\n* // returns NaN\n*\n* v = polygamma( 2, -1.0 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_atinfinityplus", "__commonJSMin", "exports", "module", "logger", "bernoulli", "factorial", "gammaln", "abs", "exp", "pow", "ln", "MAX_LN", "LN_TWO", "EPS", "debug", "MAX_SERIES_ITERATIONS", "MAX_FACTORIAL", "atinfinityplus", "n", "x", "partTerm", "xsquared", "term", "sum", "nlx", "k2", "k", "require_attransitionplus", "__commonJSMin", "exports", "module", "logger", "factorial", "gammaln", "trunc", "exp", "pow", "ln", "MAX_LN", "atinfinityplus", "debug", "MAX_SERIES_ITERATIONS", "DIGITS_BASE10", "attransitionplus", "n", "x", "minusMminus1", "lnterm", "zpows", "iter", "sum0", "d4d", "N", "m", "k", "z", "require_polyval_p3", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p4", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p5", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p6", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p7", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p8", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p9", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p10", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p11", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_p12", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polycotpi", "__commonJSMin", "exports", "module", "logger", "evalpoly", "gammaln", "signum", "cospi", "sinpi", "abs", "exp", "pow", "ln", "MAX_LN", "PINF", "NINF", "LN_PI", "PI", "zeros", "polyval3", "polyval4", "polyval5", "polyval6", "polyval7", "polyval8", "polyval9", "polyval10", "polyval11", "polyval12", "debug", "MAX_SERIES_ITERATIONS", "PI2", "PI3", "PI4", "PI5", "PI6", "PI7", "PI8", "PI9", "PI10", "PI11", "PI12", "table", "calculateDerivatives", "n", "noffset", "offset", "ncols", "mcols", "mo", "so", "co", "j", "k", "polycotpi", "x", "xc", "powTerms", "idx", "out", "sum", "c", "s", "require_nearzero", "__commonJSMin", "exports", "module", "logger", "factorial", "zeta", "abs", "pow", "NINF", "PINF", "EPS", "MAX", "debug", "MAX_SERIES_ITERATIONS", "nearzero", "n", "x", "factorialPart", "prefix", "scale", "term", "sum", "AX", "k", "require_main", "__commonJSMin", "exports", "module", "logger", "isNonNegativeInteger", "factorial", "trigamma", "digamma", "signum", "ldexp", "floor", "trunc", "zeta", "abs", "min", "PINF", "NINF", "MAX", "PI", "attransitionplus", "atinfinityplus", "polycotpi", "nearzero", "debug", "DIGITS_BASE10", "polygamma", "n", "x", "xSmallLimit", "result", "z", "main"]
}
